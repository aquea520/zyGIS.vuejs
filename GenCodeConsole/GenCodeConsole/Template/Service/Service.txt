<#@ template language="C#" #>
<#@ parameter name="DbHelper" type="Lilee.GeneratorCore.DbHelper" #>
<#@ parameter name="config" type="Lilee.GeneratorCore.config" #>
<#@ parameter name="parameter1" type="Lilee.GeneratorCore.Parameter" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Application.Bounded.DTO;
using Application.Core;
using AutoMapper;
using Domain.Bounded;
using Infrastructure.Crosscutting.Validator;
using Stbis.Common;
using Ptes.Common;
<#
	    string UpperName = parameter1.GetUpperName(parameter1.TableName);
        string LowerName = parameter1.GetLowerName(parameter1.TableName);
		string TableName = parameter1.TableName;
#>  
namespace Application.Bounded.<#= UpperName #>
{
    public class <#= UpperName #>Service : I<#= UpperName #>Service
    {
        readonly I<#= UpperName #>Repository _<#= LowerName #>Repository;

        public <#= UpperName #>Service(I<#= UpperName #>Repository <#= LowerName #>Repository)
        {
            _<#= LowerName #>Repository = <#= LowerName #>Repository;
        }

		/// <summary>
        /// 根据ID获取数据
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public <#= UpperName #>InfoDTO GetModelById(string id)
        {
			if (string.IsNullOrEmpty(id))
                throw new ApplicationValidationErrorsException(new string[] { "主键字段为空！" });

            <#= UpperName #>InfoDTO dto = new <#= UpperName #>InfoDTO();
            var model = _<#= LowerName #>Repository.Get(id);

            if (model == null)
                throw new ApplicationValidationErrorsException(new string[] { "找不到<#= LowerName #>！" });

            dto = Mapper.Map<<#= TableName #>, <#= UpperName #>InfoDTO>(model, dto);

            return dto;
        }

		/// <summary>
        /// 新增
        /// </summary>
        /// <param name="<#= LowerName #>"></param>
        /// <returns></returns>
		public bool Add(<#= UpperName #>AddDTO dto)
        {
            var entityValidator = EntityValidatorFactory.CreateValidator();
			<#= TableName #> model = new <#= TableName #>();
            
            model = Mapper.Map<<#= UpperName #>AddDTO, <#= TableName #>>(dto,model);
			
			//此处判断重复字段
            //if (_<#= LowerName #>Repository.IsExist(t => t.fullname == dto.fullname))
            //    throw new ApplicationValidationErrorsException(new string[] { "数据已存在！" });

            //验证
            if (entityValidator.IsValid(model))
            {
                _<#= LowerName #>Repository.Add(model);

                _<#= LowerName #>Repository.UnitOfWork.Commit();
            }
            else
                throw new ApplicationValidationErrorsException(entityValidator.GetInvalidMessages(model));

            return true;
        }

		/// <summary>
        /// 修改
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public bool Edit(<#= UpperName #>EditDTO dto)
        {
			if (dto == null || dto.Id == null)
                throw new ApplicationValidationErrorsException(new string[] { "主键字段为空！" });

            <#= TableName #> model = _<#= LowerName #>Repository.Get(dto.Id);
            if (model == null)
                throw new ApplicationValidationErrorsException(new string[] { "数据库中找不到此ID的值" });
            //此处写编辑时不能重复的判断
            //if (model.user_account != dto.user_account)
            //{
            //    if (_userRepository.IsExist(t => t.user_account))
            //        throw new ApplicationValidationErrorsException(new string[] { "数据已存在！" });
            //}
            model = Mapper.Map<<#= UpperName #>EditDTO, <#= TableName #>>(dto, model);

            _<#= LowerName #>Repository.Modify(model);
            _<#= LowerName #>Repository.UnitOfWork.Commit();

            return true;
        }		

		/// <summary>
        /// 删除/禁用
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool Disabled(string id)
        {
            if (string.IsNullOrEmpty(id))
                throw new ApplicationValidationErrorsException(new string[] { "主键字段为空！" });
            <#= TableName #> model = _<#= LowerName #>Repository.Get(id);
            model.Disabled();
            _<#= LowerName #>Repository.Modify(model);
            _<#= LowerName #>Repository.UnitOfWork.Commit();
            return true;
        }

		/// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="pageIndex">当前页</param>
        /// <param name="pageCount">每页条数</param>
        /// <param name="pageTotal">总条数</param>
        /// <param name="filter">查询条件</param>
        /// <returns></returns>
		public IList<<#= UpperName #>ListDTO> GridList(int pageIndex, int pageCount, out int pageTotal, FilterGroup filter)
        {
            Expression<Func<<#= TableName #>, <#= UpperName #>ListDTO>> mappedSelector =
                Mapper.CreateMapExpression<<#= TableName #>, <#= UpperName #>ListDTO>();

            QueryableSearcher<<#= TableName #>> query = new QueryableSearcher<<#= TableName #>>(filter);
			Expression<Func<<#= TableName #>, bool>> exp = query.Search();
            return _<#= LowerName #>Repository.GetPaged<DateTime, <#= UpperName #>ListDTO>(
                pageIndex,
                pageCount,
                out pageTotal,
                exp,
                p => p.CreateTime,
                false,
                mappedSelector);
        }
	}
}